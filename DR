from google.colab import drive
drive.mount('/content/drive')
import cv2
import glob
import numpy as np
data=[]
y=[]
def path_reading(path,k):
  for file in glob.glob(path):
    image_read = cv2.imread(file,cv2.IMREAD_GRAYSCALE)
    images=cv2.resize(image_read,(100,100))
    data.append(images)
    y.append(k)
img_path="/content/drive/MyDrive/gaussian_filtered_images/gaussian_filtered_images/DR/*.*"
path_reading(img_path,1)
img_path="/content/drive/MyDrive/gaussian_filtered_images/gaussian_filtered_images/No_DR/*.*"
path_reading(img_path,0)
data=np.array(data)
y=np.array(y)
print(data,y)
print(data.shape)
print(y.shape)
nsamples, nx, ny = data.shape
x = data.reshape((nsamples,nx*ny))
print(x.shape)
from sklearn.utils import shuffle
x,y=shuffle(x,y)
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size =0.25, random_state = 0)
from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(xtrain)#normalizing
xtest = sc_x.transform(xtest)
**Logistic Regression**
from sklearn.linear_model import LogisticRegression
model = LogisticRegression(random_state = 0)
model.fit(xtrain, ytrain)
y_pred = model.predict(xtest)
y_pred
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(ytest, y_pred)
print ("Confusion Matrix : \n", cm)
from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(ytest, y_pred))
from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(ytest,y_pred))
**KNN**
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 1)
knn.fit(xtrain, ytrain)
pred = knn.predict(xtest)
from sklearn.metrics import classification_report, confusion_matrix
print ("Accuracy : ", accuracy_score(ytest,pred))
print(confusion_matrix(ytest, pred))
print(classification_report(ytest, pred))
**Desicion Tree**
from sklearn.tree import DecisionTreeClassifier
clf_tree = DecisionTreeClassifier(criterion='gini', max_depth=4, random_state=1)
15
clf_tree.fit(xtrain, ytrain)
from sklearn import tree
import matplotlib.pyplot as plt
# Plotting the Decision tree
print('\nDecision Tree:- ')
plt.figure(figsize=(15,10))
tree.plot_tree(clf_tree, filled=True)
pre=clf_tree.predict(xtest)
pre
print ("Accuracy : ", accuracy_score(ytest,pre))
print(confusion_matrix(ytest, pre))
print(classification_report(ytest, pre))
**Support Vector Machine**
from sklearn.svm import SVC
cl = SVC(kernel='linear', probability=True, random_state=42)
cl.fit(xtrain, ytrain)
p=cl.predict(xtest)
print ("Accuracy : ", accuracy_score(ytest,p))
print(confusion_matrix(ytest, p))
print(classification_report(ytest, p))
**Random Forest**
from sklearn.ensemble import RandomForestClassifier
regressor = RandomForestClassifier(n_estimators=10, random_state=42)
regressor.fit(xtrain, ytrain)
dn=regressor.predict(xtest)
dn
print ("Accuracy : ", accuracy_score(ytest,dn))
print(confusion_matrix(ytest, dn))
print(classification_report(ytest, dn))
**Naive Bayes**
from sklearn.naive_bayes import GaussianNB
nb = GaussianNB()
nb.fit(xtrain,ytrain)
y1=nb.predict(xtest)
print ("Accuracy : ", accuracy_score(y1,dn))
print(confusion_matrix(y1, dn))
print(classification_report(y1, dn))
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
algo = ['logistic reg','knn','Decision','SVM','random forest','NaiveBayes']
accuracy = [accuracy_score(ytest, y_pred)*100,accuracy_score(ytest,pred)*100,accuracy_score(ytest,pre)*100,accuracy_score(ytest,p)*100,accuracy_score(ytest,dn)*100,accuracy_score(ytest,y1)*100]
ax.bar(algo[0],accuracy[0],color = 'b')
ax.bar(algo[1],accuracy[1],color = 'y')
ax.bar(algo[2],accuracy[2],color = 'pink')
ax.bar(algo[3],accuracy[3],color = 'green')
ax.bar(algo[4],accuracy[4],color = 'r')
ax.bar(algo[5],accuracy[5],color = 'yellow')
plt.xlabel('Classifiers------------>')
plt.ylabel('Accuracies------------->')
plt.title('ACCURACIES RESULTED')
plt.show()
**CROSS VALIDATION**
img = cv2.imread("/content/drive/MyDrive/Check.png",cv2.IMREAD_GRAYSCALE)
print(img)
import cv2
from google.colab.patches import cv2_imshow
img=cv2.resize(img,(100,100))
cv2_imshow(img)
cv2.waitKey(0)
cv2.destroyAllWindows()
test=np.array(img)
print(test.shape)
print(test)
t=test.reshape(1,10000)
print(t.shape)
prediction=model.predict(t)
prediction
